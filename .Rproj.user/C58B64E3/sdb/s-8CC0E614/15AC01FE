{
    "collab_server" : "",
    "contents" : "library(roxygen2)\n#' Read in FARS data\n#'\n#' @note error returned if file does not exist\n#'\n#' @param filename A character string giving the path to the file containing the FARS data\n#'\n#' @return This function returns a tibble of FARS data\n#'\n#' @examples \\dontrun file<-make_filename(2014); fars_2014<-fars_read(file)\n#'\n#' @importFrom readr read_csv\n#'\n#' @export\n\nfars_read <- function(filename) {\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n}\n\n#' Make filename for FARS data in a given year\n#'\n#' @param year integer of year\n#'\n#' @return This function returns a filename to be used with fars_read\n#'\n#' @examples \\dontrun file<-make_filename(2014); fars_2014<-fars_read(file)\n#'\n#' @export\n\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  sprintf(\"accident_%d.csv.bz2\", year)\n}\n\n#' Read in multiple years of FARS data\n#'\n#' @note NULL returned if no data for any input years\n#'\n#' @param years a vector of integer years, if data for any years don't exist, no data will be returned\n#'\n#' @return this function returns a tibble with data from all years of interest\n#'\n#' @examples \\dontrun fars<-fars_read_years(c(2012,2013,2014))\n#'\n#' @importFrom dplyr mutate select\n#'\n#' @export\n\nfars_read_years <- function(years) {\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n}\n\n#' Summarize record counts by year\n#'\n#' @inheritParams years\n#'\n#' @return This function returns a tibble with summaries of record counts by month for each Year of interest\n#'\n#' @examples fars<-fars_summarize_years(c(2012,2013,2014))\n#'\n#' @importFrom dplyr bind_rows group_by summarize\n#' @importFrom tidyr spread\n#'\n#' @export\n\nfars_summarize_years <- function(years) {\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n}\n\n#' Make a map of accidents in a state\n#'\n#' This function will produce a map of accidents within a state for a given year\n#'\n#' @note Error returned if invalid state.num, NULL returned if no accidents occured in a given state/year\n#'\n#' @inheritParams year\n#' @param state.num integer reperesenting state of interest\n#'\n#' @return This function returns a graphics object that is a map of accidents within the\n#' given state for the given year.  If there is no data for that year or the state number is invalid, the function\n#' will return a NULL.\n#'\n#' @examples \\dontrun fars_map_state(1,2014)\n#'\n#' @importFrom maps map\n#' @importFrom dplyr filter\n#' @importFrom graphics points\n#'\n#' @export\n\nfars_map_state <- function(state.num, year) {\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n}\n",
    "created" : 1488216029473.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1258870194",
    "id" : "15AC01FE",
    "lastKnownWriteTime" : 1488236001,
    "last_content_update" : 1488236001160,
    "path" : "~/faRs/R/fars_functions.R",
    "project_path" : "R/fars_functions.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}